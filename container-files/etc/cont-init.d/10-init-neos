#!/usr/bin/with-contenv /bin/bash
set -e

###
# Initial provisioning of Neos - done only once!
#
# - Copy files from either local /src or glone from $REPOSITORY_URL branch $VERSION
# - Perform a composer install with $COMPOSER_INSTALL_PARAMS
# - Creates a database $DB_DATABASE (with $DB_USER, $DB_HOST, $DB_PASS)
# - (Optional) Import database dump from $AWS_BACKUP_ARN / $AWS_ENDPOINT
# - (Optional) Import demo content from $SITE_PACKAGE
# - (Optional) Create admin user with $ADMIN_PASSWORD
# - (Optional) Call site hook shell script $SITE_INIT_SCRIPT
##

# Where we want out application to reside
WWW_ROOT=/data/www
WWW_USER=www-data

echo "* Configure Neos with FLOW_CONTEXT=$FLOW_CONTEXT"

# Bail out if we have provisioned before
if [ -f ${WWW_ROOT}/composer.json ]; then
  echo "* Neos Provisioning: Do nothing, initial provisioning done"
  exit
fi

# Unpack our application once on first init
mkdir -p ${WWW_ROOT}
cd ${WWW_ROOT} || exit 1

if [ "${REPOSITORY_URL}" ]; then
  echo "* Cloning project from $REPOSITORY_URL ($VERSION)"
  git clone -b $VERSION $REPOSITORY_URL .
else
  echo "* Cloning project from local files"
  rsync -r \
    --exclude node_modules \
    --exclude .git \
    --exclude /Data \
    --exclude /Packages \
    /src/ .
fi

# Set permissions
chown ${WWW_USER}. -R /tmp/
chown ${WWW_USER}. -R /data/
chmod g+rwX -R /data/*

# wait for the mysql server to come up
while ! mysqladmin ping -u "${DB_USER}" -p"${DB_PASS}" -h"${DB_HOST}" --silent; do
  echo "... waiting for the db container to become available"
  sleep 1
done

##
# Database initialization
##

# Create DB
echo "* Creating database $DB_DATABASE"
echo "CREATE DATABASE IF NOT EXISTS $DB_DATABASE" | mysql -u $DB_USER -p$DB_PASS -h $DB_HOST

# Import DB dump from AWS
if [ -z "$AWS_BACKUP_ARN" ]; then
  echo "* AWS_BACKUP_ARN not set, skipping"
else
  echo "* Importing S3 data from $AWS_BACKUP_ARN"
  if [ -z "$AWS_ENDPOINT" ]; then
    aws s3 cp ${AWS_BACKUP_ARN}db.sql /data/db.sql
  else
    aws s3 --endpoint-url=$AWS_ENDPOINT cp ${AWS_BACKUP_ARN}db.sql /data/db.sql
  fi
  mysql -u $DB_USER -p$DB_PASS -h $DB_HOST $DB_DATABASE </data/db.sql
fi

##
# Flow initialization
##

# flow cmd wrapper to execute flow as user
SUDO="sudo -u ${WWW_USER}"
FLOW="${SUDO} FLOW_CONTEXT=${FLOW_CONTEXT} ./flow"

FLOW_SETTINGS_FILENAME="Settings.yaml"
# from flow > 4 on we can use Settings.*.yaml files
if [ -z "$FLOW_MAJOR_VERSION" -o "$FLOW_MAJOR_VERSION" > "4" ]; then
  FLOW_SETTINGS_FILENAME="Settings.docker.yaml"
fi

echo "* Running composer install $COMPOSER_INSTALL_PARAMS"
${SUDO} composer install $COMPOSER_INSTALL_PARAMS

# Make sure our flow is using the DB_* variables from docker to connect to the DB
cat <<EOF > "Configuration/${FLOW_SETTINGS_FILENAME}"
# Use variables to configure our persistence
Neos:
  Flow:
    persistence:
      backendOptions:
        # we need that to ensure that the Testing/Behat FLOW_CONTEXT will use the correct driver
        driver: pdo_mysql
        dbname: "%env:DB_DATABASE%"
        user: "%env:DB_USER%"
        password: "%env:DB_PASS%"
        host: "%env:DB_HOST%"
EOF

echo "* Running doctrine:migrate"
${FLOW} doctrine:migrate --quiet

if [ -z "$SITE_PACKAGE" ]; then
  echo "* SITE_PACKAGE not set (no site imported)"
else
  echo "* Importing site from $SITE_PACKAGE"
  ${FLOW} site:import --package-key=$SITE_PACKAGE
fi

if [ -z "$ADMIN_PASSWORD" ]; then
  echo "* No ADMIN_PASSWORD set"
else
  echo "* Creating user admin"
  ${FLOW} user:create --roles='Administrator' --username='admin' --password=$ADMIN_PASSWORD --first-name='UpdateMe' --last-name='Now'
fi

echo "* Doing a resource:publish"
${FLOW} resource:publish

# Hook: allow site specific init.sh scripts
if [ "${SITE_INIT_SCRIPT}" -a -f "${SITE_INIT_SCRIPT}" ]; then
  echo "* SITE_INIT_SCRIPT set: now executing FLOW_CONTEXT=${FLOW_CONTEXT} $(pwd)/${SITE_INIT_SCRIPT}.."
  chmod +x "./${SITE_INIT_SCRIPT}"
  ${SUDO} --preserve-env=FLOW_CONTEXT,${SITE_INIT_ENV_VARS} "./${SITE_INIT_SCRIPT}"
fi
