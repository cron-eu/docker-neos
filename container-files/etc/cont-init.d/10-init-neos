#!/usr/bin/with-contenv /bin/bash
set -e

###
# Initial provisioning
###

function update_settings_yaml() {
  local settings_file=$1

  cd /data/www-provisioned
  create_settings_yaml $settings_file

  [ -f $settings_file ] || return 0

  echo "* Configuring Neos $settings_file..."
  sed -i -r "1,/driver:/s/port: .+?/driver: pdo_mysql/g" $settings_file
  sed -i -r "1,/dbname:/s/dbname: .+?/dbname: \"$DB_DATABASE\"/g" $settings_file
  sed -i -r "1,/user:/s/user: .+?/user: \"$DB_USER\"/g" $settings_file
  sed -i -r "1,/password:/s/password: .+?/password: \"$DB_PASS\"/g" $settings_file
  sed -i -r "1,/host:/s/host: .+?/host: \"$DB_HOST\"/g" $settings_file
  sed -i -r "1,/port:/s/port: .+?/port: 3306/g" $settings_file
}

function update_neos_settings() {
  if [ -z "${FLOW_CONTEXT}" ]; then
    update_settings_yaml Configuration/Settings.yaml
  else
    update_settings_yaml Configuration/${FLOW_CONTEXT}/Settings.yaml
    if [ "${FLOW_CONTEXT}" = "Development/Behat" ]; then
      update_settings_yaml Configuration/Testing/Behat/Settings.yaml
    fi
  fi
}

function create_settings_yaml() {
  local settings_file=$1
  mkdir -p /data/www-provisioned/$(dirname $settings_file)
  if [ ! -f /data/www-provisioned/$settings_file ]; then
    cp /Settings.yaml /data/www-provisioned/$settings_file
  fi
}

# Provision conainer at first run
if [ -f /data/www/composer.json ] || [ -f /data/www-provisioned/composer.json ] || [ -z "$REPOSITORY_URL" -a ! -f "/src/composer.json" ]; then
  echo "* Neos Provisioning: Do nothing, initial provisioning done"

  # Update DB Settings to keep them in sync with the docker ENV vars
  update_neos_settings
else
  # Layout default directory structure
  mkdir -p /data/www-provisioned

  ###
  # Install into /data/www
  ###
  cd /data/www-provisioned

  if [ "${REPOSITORY_URL}" ]; then
    echo "* Cloning project: $REPOSITORY_URL ($VERSION)"
    git clone -b $VERSION $REPOSITORY_URL .
  else
    echo "* Cloning project: local files"
    rsync -r --exclude node_modules --exclude .git --exclude /Data /src/ .
  fi

  echo "* Running composer install $COMPOSER_INSTALL_PARAMS"
  composer install $COMPOSER_INSTALL_PARAMS
  update_neos_settings

  # Set permissions
  chown www-data:www-data -R /tmp/
  chown www-data:www-data -R /data/
  chmod g+rwx -R /data/*
fi

# flow cmd wrapper to execute flow as user
FLOW="sudo -u www-data FLOW_CONTEXT=${FLOW_CONTEXT} ./flow"

# root dir where SITE_PACKAGE repo resides
WWW_ROOT="/data/www"

# On first launch unpack provisioned files into /data/www
if [ -f /data/www/composer.json ] || [ -z "$REPOSITORY_URL" -a ! -f "/src/composer.json" ]; then
  echo "* Do nothing, provisioned files were already moved"
else
  if [ -d /data/www/ ]; then
    echo "* /data/www/ has probably been locally mounted. Moving provisioned files into it."
    # Move files our from /data/www/, in case there's already something partially mounted (e.g. a locally mounted package folder)
    rsync -a /data/www-provisioned/ /data/www/
  else
    echo "* Symlink /data/www/ to provisioned files"
    ln -s /data/www-provisioned /data/www
  fi
fi

cd ${WWW_ROOT} || exit 1

###
# Check if DB already exists and is not empty
###

# wait for the mysql server to come up
while ! mysqladmin ping -u "${DB_USER}" -p"${DB_PASS}" -h"${DB_HOST}" --silent; do
  echo "... waiting for the db container to become available"
  sleep 2
done

set +e
RESULT=$(mysql -u $DB_USER -p$DB_PASS -h $DB_HOST -e "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema ='${DB_DATABASE}'" --batch --skip-column-names)
set -e
if [[ $RESULT -gt 0 ]]; then
  echo "* Database already exists, skipping DB import"
else
  ###
  # Import DB dump from AWS
  ###
  if [ -z "$AWS_BACKUP_ARN" ]; then
    echo "* AWS_BACKUP_ARN not set, skipping"
  else
    echo "* Importing S3 data from $AWS_BACKUP_ARN"
    if [ -z "$AWS_ENDPOINT" ]; then
      aws s3 cp ${AWS_BACKUP_ARN}db.sql /data/www/Data/Persistent/db.sql
    else
      aws s3 --endpoint-url=$AWS_ENDPOINT cp ${AWS_BACKUP_ARN}db.sql /data/www/Data/Persistent/db.sql
    fi
  fi

  ###
  # Create and import DB
  ###
  echo "* Creating database $DB_DATABASE"
  echo "CREATE DATABASE IF NOT EXISTS $DB_DATABASE" | mysql -u $DB_USER -p$DB_PASS -h $DB_HOST
  if [ -f /data/www/Data/Persistent/db.sql ]; then
    mysql -u $DB_USER -p$DB_PASS -h $DB_HOST $DB_DATABASE </data/www/Data/Persistent/db.sql
  fi

  echo "* Running doctrine:migrate"
  ${FLOW} doctrine:migrate --quiet

  if [ -z "$SITE_PACKAGE" ]; then
    echo "* SITE_PACKAGE not set (no site imported)"
  else
    echo "* Importing site from $SITE_PACKAGE"
    ${FLOW} site:import --package-key=$SITE_PACKAGE
  fi

  if [ -z "$ADMIN_PASSWORD" ]; then
    echo "* No ADMIN_PASSWORD set"
  else
    echo "* Creating user admin"
    ${FLOW} user:create --roles='Administrator' --username='admin' --password=$ADMIN_PASSWORD --first-name='UpdateMe' --last-name='Now'
  fi

  if [ -z "$DONT_PUBLISH_PERSISTENT" ]; then
    echo "* Doing a resource:publish"
    ${FLOW} resource:publish
  fi
fi

if test -d /data/www/Web/_Resources/Static; then
  echo "* No need to publish static resources"
else
  echo "* Doing a resource:publish --collection static"
  ${FLOW} resource:publish --collection static
fi

cd "${WWW_ROOT}"

if [ "${SITE_INIT_SCRIPT}" -a -f "${SITE_INIT_SCRIPT}" ]; then
  echo "* SITE_INIT_SCRIPT set: now executing FLOW_CONTEXT=${FLOW_CONTEXT} $(pwd)/${SITE_INIT_SCRIPT}.."
  chmod +x "./${SITE_INIT_SCRIPT}"
  sudo -u www-data --preserve-env=FLOW_CONTEXT,${SITE_INIT_ENV_VARS} "./${SITE_INIT_SCRIPT}"
fi
